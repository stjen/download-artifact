# The MIT License (MIT)
#
# Copyright ¬© 2024 The pyTooling Authors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
name: üì• Download Artifact(s) (Preserve File Permissions)
branding:
  icon: download
  color: yellow
description: Download the artifact(s) with preserved file privileges which were previously uploaded by the 'upload-artifact' action.
author: Patrick Lehmann (@Paebbels)

inputs:
  artifact-ids:
    description: 'IDs of the artifacts to download, comma-separated. Either inputs `artifact-ids` or `name` can be used, but not both.'
    required: false
  name:
    description: |
      Name of the artifact to download.
      If unspecified, all artifacts for the run are downloaded.
    type: string
    required: false
  path:
    description: |
      Destination path. Supports basic tilde expansion.
      Default is $GITHUB_WORKSPACE
    type: string
    required: false
    default: '.'
  pattern:
    description: |
      A glob pattern to the artifacts that should be downloaded.
      Ignored if name is specified.
    type: string
    required: false
  merge-multiple:
    description: |
      When multiple artifacts are matched, this changes the behavior of the destination directories.
      If true, the downloaded artifacts will be in the same directory specified by path.
      If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
    type: boolean
    required: false
    default: false
  github-token:
    description: |
      The GitHub token used to authenticate with the GitHub API.
      This is required when downloading artifacts from a different repository or from a different workflow run.
      If unspecified, the action will download artifacts from the current repo and the current workflow run.
    type: string
    required: false
  repository:
    description: |
      The repository owner and the repository name joined together by "/".
      If github-token is specified, this is the repository that artifacts will be downloaded from.
    type: string
    required: false
    default: ${{ github.repository }}
  run-id:
    description: |
      The id of the workflow run where the desired download artifact was uploaded from.
      If github-token is specified, this is the run that artifacts will be downloaded from.
    type: string
    required: false
    default: ${{ github.run_id }}
  tarball-name:
    description: |
      Filename of the embedded tarball.
    type: string
    required: false
    default: '__pyTooling_upload_artifact__.tar'
  investigate:
    description: |
      Print downloaded artifact's content.
    type: boolean
    required: false
    default: false

outputs:
  download-path:
    description: |
      Absolute path where the artifact(s) were downloaded.
    value: ${{ steps.download.outputs.download-path }}

runs:
  using: composite
  steps:
    # https://github.com/actions/download-artifact
    - name: üì• Download artifact
      uses: actions/download-artifact@v4
      id: download
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.path }}
        pattern: ${{ inputs.pattern }}
        merge-multiple: ${{ inputs.merge-multiple }}
        github-token: ${{ inputs.github-token }}
        repository: ${{ inputs.repository }}
        run-id: ${{ inputs.run-id }}
        artifact-ids: ${{ inputs.artifact-ids }} 
    - name: Extract tarball content(s)
      id: extract
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        # Extract tarball content(s)
        set +e

        ANSI_CYAN=$'\x1b[36m'
        ANSI_LIGHT_RED=$'\x1b[91m'
        ANSI_LIGHT_GREEN=$'\x1b[92m'
        ANSI_LIGHT_YELLOW=$'\x1b[93m'
        ANSI_LIGHT_BLUE=$'\x1b[94m'
        ANSI_NOCOLOR=$'\x1b[0m'

        if [[ "${{ inputs.name }}" == "" ]]; then
          for artifactDirectory in $(echo */); do
            (
              cd "${artifactDirectory}"

              printf "%s" "Checking temporary tarball   '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' ... "
              if [[ -f "${{ inputs.tarball-name }}" ]]; then
                printf "%s\n" "${ANSI_LIGHT_GREEN}[FOUND]${ANSI_NOCOLOR}"

                printf "%s" "Extracting temporary tarball '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' ... "
                tar -xf "${{ inputs.tarball-name }}"
                if [[ $? -ne 0 ]]; then
                  printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
                  printf "::error title=%s::%s\n" "pyTooling/download-artifact" "Temporary tarball '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' couldn't be extracted."
                else
                  printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
                  printf "%s" "Removing temporary tarball   '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' ... "
                  rm -f "${{ inputs.tarball-name }}"
                  if [[ $? -ne 0 ]]; then
                    printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
                    printf "::error title=%s::%s\n" "pyTooling/download-artifact" "Temporary tarball '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' couldn't be removed."
                  else
                    printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
                  fi

                  printf "Directories: %-4s  Files: %s\n" "$(($(find . -mindepth 0 -type d | wc -l) - 1))" "$(($(find . -mindepth 0 -type f | wc -l) - 1))"
                  if [[ "${{ inputs.investigate }}" == "true" ]]; then
                    printf "::group::${ANSI_LIGHT_BLUE}Artifact content of '${{ inputs.path }}/${artifactDirectory}'${ANSI_NOCOLOR}\n"
                    if [[ "${{ runner.os }}" == "Linux" ]]; then
                      tree -pashC -I .git .
                    else
                      ls -lAh
                    fi
                    printf "::endgroup::\n"
                  fi
                fi
              else
                printf "%s\n" "${ANSI_LIGHT_YELLOW}[MISSING]${ANSI_NOCOLOR}"
                printf "  %s\n" "${ANSI_LIGHT_YELLOW}‚Üí assuming artifact was uploaded by actions/upload-artifact${ANSI_NOCOLOR}"

                printf "Directories: %-4s  Files: %s\n" "$(($(find . -mindepth 0 -type d | wc -l) - 1))" "$(($(find . -mindepth 0 -type f | wc -l) - 1))"
                if [[ "${{ inputs.investigate }}" == "true" ]]; then
                  printf "::group::${ANSI_LIGHT_BLUE}Artifact content of '${{ inputs.path }}/${artifactDirectory}'${ANSI_NOCOLOR}\n"
                  if [[ "${{ runner.os }}" == "Linux" ]]; then
                    tree -pashC -I .git .
                  else
                    ls -lAh
                  fi
                  printf "::endgroup::\n"
                fi
              fi
            )
          done
        else
          printf "%s" "Checking temporary tarball   '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' ... "
          if [[ -f "${{ inputs.tarball-name }}" ]]; then
            printf "%s\n" "${ANSI_LIGHT_GREEN}[FOUND]${ANSI_NOCOLOR}"

            printf "%s" "Extracting temporary tarball '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' ... "
            tar -xf "${{ inputs.tarball-name }}"
            if [[ $? -ne 0 ]]; then
              printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
              printf "::error title=%s::%s\n" "pyTooling/download-artifact" "Temporary tarball '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' couldn't be extracted."
            else
              printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
              printf "%s" "Removing temporary tarball   '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' ... "
              rm -f "${{ inputs.tarball-name }}"
              if [[ $? -ne 0 ]]; then
                printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
                printf "::error title=%s::%s\n" "pyTooling/download-artifact" "Temporary tarball '${{ inputs.path }}/${artifactDirectory}${{ inputs.tarball-name }}' couldn't be removed."
              else
                printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
              fi

              printf "Directories: %-4s  Files: %s\n" "$(($(find . -mindepth 0 -type d | wc -l) - 1))" "$(($(find . -mindepth 0 -type f | wc -l) - 1))"
              if [[ "${{ inputs.investigate }}" == "true" ]]; then
                printf "::group::${ANSI_LIGHT_BLUE}Artifact content of '${{ inputs.path }}/${artifactDirectory}'${ANSI_NOCOLOR}\n"
                if [[ "${{ runner.os }}" == "Linux" ]]; then
                  tree -pashC -I .git .
                else
                  ls -lAh
                fi
                printf "::endgroup::\n"
              fi
            fi
          else
            printf "%s\n" "${ANSI_LIGHT_YELLOW}[MISSING]${ANSI_NOCOLOR}"
            printf "  %s\n" "${ANSI_LIGHT_YELLOW}‚Üí assuming artifact was uploaded by ${ANSI_LIGHT_BLUE}'actions/upload-artifact'${ANSI_NOCOLOR}"

            printf "Directories: %-4s  Files: %s\n" "$(($(find . -mindepth 0 -type d | wc -l) - 1))" "$(($(find . -mindepth 0 -type f | wc -l) - 1))"
            if [[ "${{ inputs.investigate }}" == "true" ]]; then
              printf "::group::${ANSI_LIGHT_BLUE}Artifact content of '${{ inputs.path }}/${artifactDirectory}'${ANSI_NOCOLOR}\n"
              if [[ "${{ runner.os }}" == "Linux" ]]; then
                tree -pashC -I .git .
              else
                ls -lAh
              fi
              printf "::endgroup::\n"
            fi
          fi
        fi
